# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-11-14 23:36
from __future__ import unicode_literals

from django.db import migrations
import requests
from decimal import Decimal
import uuid


class Migration(migrations.Migration):

    def forward(apps, schema_editor):
        print()

        def get_json_response(url):
            try:
                response = requests.get(url)
                response.raise_for_status()
                return response.json()
            except Exception as e:
                print("Skipping {}".format(url))
                print(e)
                return None

        def get_price(appid):
            content = get_json_response(
                "http://store.steampowered.com/api/appdetails?appids={}&cc=us".format(appid))
            try:
                if content:
                    if content[str(appid)]["data"]["is_free"]:
                        return Decimal('0.00')

                    price_string = str(content[str(appid)]["data"]["price_overview"]["initial"])
                    return Decimal(price_string[:-2] + "." + price_string[-2:])
                else:
                    return Decimal('-1.0')
            except KeyError as e:
                return Decimal('-1.0')

        Game = apps.get_model("game_finder", "Game")
        Tag = apps.get_model("game_finder", "Tag")
        multiplayer_tags = {'Multiplayer' : None, 'Local Multiplayer' : None,
                            'Co-Op' : None, 'Co-op' : None,
                            'Online Co-Op' : None, 'Local Co-Op' : None,
                            'Massively Multiplayer' : None}

        # Generate multi-player tags
        print("Generating Tags.")
        for item in multiplayer_tags.keys():
            tag = Tag(name=item)
            tag.save()
            multiplayer_tags[item] = tag

        print("Generating Games.")
        content = get_json_response("https://steamspy.com/api.php?request=all")

        if content:
            for appid, game_data in content.items():
                print(appid)
                if game_data['tags']:
                    game_tags = game_data['tags'].keys()
                    game_multiplayer_tags = game_tags & multiplayer_tags.keys()
                    if len(game_multiplayer_tags) > 0:
                        price = get_price(appid)
                        game_name = game_data["name"]
                        game = Game(appid=int(appid),title=game_name,price=price)
                        game.save()
                        for key in game_multiplayer_tags:
                            game.tags.add(multiplayer_tags[key])
                        game.save()

    def backward(apps, schema_editor):
        Game = apps.get_model("game_finder", "Game")
        Tag = apps.get_model("game_finder", "Tag")

        for tag in Tag.objects.all():
            tag.delete()

        for game in Game.objects.all():
            game.delete()

    dependencies = [
        ('game_finder', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(forward, backward)
    ]
